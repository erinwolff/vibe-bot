"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFormats = void 0;
const undici_1 = require("undici");
const constants_1 = require("./utils/constants");
const common_1 = require("./utils/common");
/**
 * Generates Stream URL(s).
 *
 * Always use this to get streams before getting readable streams!
 */
const getFormats = (stream, options = {}) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    if (typeof stream !== "object") {
        throw new Error(constants_1.constants.errors.type("formats", "object", typeof stream));
    }
    if (typeof options !== "object") {
        throw new Error(constants_1.constants.errors.type("options", "object", typeof options));
    }
    options = (0, common_1.mergeObj)({
        requestOptions: {
            headers: {
                "User-Agent": constants_1.constants.headers.userAgent,
            },
        },
    }, options);
    const resolved = [];
    let directFormats = [
        ...(stream.formats || []),
        ...(stream.adaptiveFormats || []),
    ].sort((a, b) => (a.bitrate ? +a.bitrate : 0) -
        (b.bitrate ? +b.bitrate : 0) +
        (a.audioSampleRate ? parseInt(a.audioSampleRate) : 0) -
        (b.audioSampleRate ? parseInt(b.audioSampleRate) : 0));
    if (typeof options.filterBy === "function") {
        directFormats = directFormats.filter(options.filterBy);
    }
    let decipher;
    try {
        for (const x of directFormats) {
            if (!((_b = (_a = options.filterBy) === null || _a === void 0 ? void 0 : _a.call(options, x)) !== null && _b !== void 0 ? _b : true)) {
                continue;
            }
            if (((_c = stream.player) === null || _c === void 0 ? void 0 : _c.url) && x.signatureCipher) {
                decipher !== null && decipher !== void 0 ? decipher : (decipher = yield getCipherFunction(stream.player.url, {
                    requestOptions: options.requestOptions,
                }));
                const cipherData = (0, common_1.parseQueryString)(x.signatureCipher);
                x.url = `${cipherData.url}&${cipherData.sp}=${decipher.decoder(cipherData.s)}`;
                x.__decoded = true;
            }
            // not really sure about this.
            if ((_d = x.url) === null || _d === void 0 ? void 0 : _d.startsWith("https://")) {
                x.__decoded = true;
            }
            resolved.push(x);
        }
        decipher === null || decipher === void 0 ? void 0 : decipher.dispose();
    }
    catch (err) {
        if (decipher && !decipher.isDisposed()) {
            decipher.dispose();
        }
        throw err;
    }
    if (stream.hlsManifestUrl) {
        const hlsResp = yield (0, undici_1.request)(stream.hlsManifestUrl, options.requestOptions);
        const hlsData = yield hlsResp.body.text();
        const hlsStreams = hlsData.matchAll(/#EXT-X-STREAM-INF:([^\n]*)\n([^\n]+)/g);
        for (const x of hlsStreams) {
            const [, tagsRaw, url] = x;
            if (!url)
                continue;
            const tags = {};
            if (tagsRaw) {
                for (const x of tagsRaw.matchAll(/(\w+)=([^,\n]+)/g)) {
                    const [, k, v] = x;
                    if (k && v) {
                        tags[k] = v;
                    }
                }
            }
            const codecs = tags["CODECS"];
            const resolution = (_f = (_e = tags["RESOLUTION"]) === null || _e === void 0 ? void 0 : _e.split("x")) !== null && _f !== void 0 ? _f : [];
            resolved.push({
                itag: (0, common_1.parseNumberOr)((_g = url.match(/itag\/(\d+)\//)) === null || _g === void 0 ? void 0 : _g[1], 0),
                url,
                mimeType: codecs ? `codes=${codecs[1]}` : "",
                contentLength: (_h = tags["BANDWIDTH"]) !== null && _h !== void 0 ? _h : "0",
                fps: (0, common_1.parseNumberOr)(tags["RATE"], 0),
                height: (0, common_1.parseNumberOr)(resolution[1], 0),
                width: (0, common_1.parseNumberOr)(resolution[0], 0),
                __decoded: true,
            });
        }
    }
    return resolved;
});
exports.getFormats = getFormats;
const getCipherFunction = (url, options = {}) => __awaiter(void 0, void 0, void 0, function* () {
    const resp = yield (0, undici_1.request)(url, options.requestOptions);
    const data = yield resp.body.text();
    const aFuncStart = 'a=a.split("")';
    const aFuncEnd = "};";
    const aFuncBody = (0, common_1.contentBetween)(data, aFuncStart, aFuncEnd);
    const aFunc = "(a) => {" + aFuncStart + aFuncBody + aFuncEnd;
    const bVar = (0, common_1.contentBetween)(aFuncBody, ";", ".");
    const bVarStart = `var ${bVar}=`;
    const bVarEnd = "}};";
    const bFuncBody = (0, common_1.contentBetween)(data, bVarStart, bVarEnd);
    const bFunc = bVarStart + bFuncBody + bVarEnd;
    const decoderCode = aFunc + "\n" + bFunc;
    let evaluator;
    if (typeof options.evaluator === "function") {
        evaluator = options.evaluator;
    }
    else if (typeof options.evaluator === "string" &&
        options.evaluator !== "auto") {
        switch (options.evaluator) {
            case "isolated-vm":
                evaluator = evalInIsolatedVM;
                break;
            case "vm":
                evaluator = evalInNodeVM;
                break;
            case "eval":
                evaluator = evalInEval;
                break;
        }
    }
    else {
        if ((0, common_1.isModuleInstalled)("isolated-vm")) {
            evaluator = evalInIsolatedVM;
        }
        else if ((0, common_1.isModuleInstalled)("vm")) {
            evaluator = evalInNodeVM;
        }
        else {
            evaluator = evalInEval;
        }
    }
    const result = yield evaluator(decoderCode);
    return result;
});
const evalInEval = (code) => __awaiter(void 0, void 0, void 0, function* () {
    return {
        decoder: eval(code),
        isDisposed: () => true,
        dispose: () => { },
    };
});
const evalInNodeVM = (code) => __awaiter(void 0, void 0, void 0, function* () {
    const vm = (0, common_1.requireOrThrow)("vm");
    return {
        decoder: vm.runInNewContext(code),
        isDisposed: () => true,
        dispose: () => { },
    };
});
const evalInIsolatedVM = (code, options = {}) => __awaiter(void 0, void 0, void 0, function* () {
    var _j;
    const ivm = (0, common_1.requireOrThrow)("isolated-vm");
    const isolate = new ivm.Isolate({ memoryLimit: (_j = options === null || options === void 0 ? void 0 : options.memoryLimit) !== null && _j !== void 0 ? _j : 8 });
    const context = isolate.createContextSync();
    return {
        decoder: yield context.eval(code),
        isDisposed: () => isolate.isDisposed,
        dispose: () => {
            if (isolate.isDisposed)
                return;
            isolate.dispose();
        },
    };
});
