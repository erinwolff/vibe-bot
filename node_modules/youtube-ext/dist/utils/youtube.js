"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseYoutubeKeywords = exports.isYoutubePlaylistURL = exports.getYoutubePlaylistId = exports.youtubePlaylistURLRegex = exports.isYoutubeWatchURL = exports.getYoutubeVideoId = exports.youtubeWatchURLRegex = exports.isYoutubeURL = exports.youtubeURLRegex = exports.isVideoCodec = exports.isAudioCodec = exports.isHlsContentURL = exports.isDashContentURL = exports.isLiveContentURL = void 0;
const isLiveContentURL = (url) => { var _a; return (_a = url === null || url === void 0 ? void 0 : url.includes("/yt_live_broadcast/")) !== null && _a !== void 0 ? _a : false; };
exports.isLiveContentURL = isLiveContentURL;
const isDashContentURL = (url) => { var _a; return (_a = url === null || url === void 0 ? void 0 : url.includes("/dash/")) !== null && _a !== void 0 ? _a : false; };
exports.isDashContentURL = isDashContentURL;
const isHlsContentURL = (url) => { var _a; return (_a = url === null || url === void 0 ? void 0 : url.includes("/hls_playlist/")) !== null && _a !== void 0 ? _a : false; };
exports.isHlsContentURL = isHlsContentURL;
const isAudioCodec = (codec) => { var _a; return (_a = codec === null || codec === void 0 ? void 0 : codec.startsWith("audio/")) !== null && _a !== void 0 ? _a : false; };
exports.isAudioCodec = isAudioCodec;
const isVideoCodec = (codec) => { var _a; return (_a = codec === null || codec === void 0 ? void 0 : codec.startsWith("video/")) !== null && _a !== void 0 ? _a : false; };
exports.isVideoCodec = isVideoCodec;
exports.youtubeURLRegex = /https?:\/\/(?:youtu\.be|(?:(?:www|m|music|gaming)\.)?youtube\.com)/;
const isYoutubeURL = (url) => hasMatch(exports.youtubeURLRegex, url);
exports.isYoutubeURL = isYoutubeURL;
exports.youtubeWatchURLRegex = /\/watch\?v=([a-zA-Z0-9-_]{11})/;
const getYoutubeVideoId = (url) => { var _a; return (_a = url === null || url === void 0 ? void 0 : url.match(exports.youtubeWatchURLRegex)) === null || _a === void 0 ? void 0 : _a[1]; };
exports.getYoutubeVideoId = getYoutubeVideoId;
const isYoutubeWatchURL = (url) => !!(url === null || url === void 0 ? void 0 : url.match(exports.youtubeWatchURLRegex));
exports.isYoutubeWatchURL = isYoutubeWatchURL;
exports.youtubePlaylistURLRegex = /\/playlist\?list=([A-Za-z0-9_]+)/;
const getYoutubePlaylistId = (url) => { var _a; return (_a = url === null || url === void 0 ? void 0 : url.match(exports.youtubePlaylistURLRegex)) === null || _a === void 0 ? void 0 : _a[1]; };
exports.getYoutubePlaylistId = getYoutubePlaylistId;
const isYoutubePlaylistURL = (url) => !!(url === null || url === void 0 ? void 0 : url.match(exports.youtubePlaylistURLRegex));
exports.isYoutubePlaylistURL = isYoutubePlaylistURL;
const hasMatch = (regex, value) => !!(value === null || value === void 0 ? void 0 : value.match(regex));
const keywordsRegex = /("[^"]+"|[^\s]+)/g;
const parseYoutubeKeywords = (value) => {
    const keywords = [];
    for (const x of value.matchAll(keywordsRegex)) {
        let v = x[1];
        if (v[0] === '"') {
            v = v.substring(1, v.length - 1);
        }
        keywords.push(v);
    }
    return keywords;
};
exports.parseYoutubeKeywords = parseYoutubeKeywords;
