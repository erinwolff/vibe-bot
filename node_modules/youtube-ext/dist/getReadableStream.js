"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getReadableStream = void 0;
const undici_1 = require("undici");
const constants_1 = require("./utils/constants");
const common_1 = require("./utils/common");
const youtube_1 = require("./utils/youtube");
/**
 * Returns a YouTube stream.
 *
 * **Info:** Install "m3u8stream" using `npm install m3u8stream` for livestream support.
 */
const getReadableStream = (stream, options = {}) => __awaiter(void 0, void 0, void 0, function* () {
    if (typeof stream !== "object") {
        throw new Error(constants_1.constants.errors.type("streams", "object", typeof stream));
    }
    if (typeof options !== "object") {
        throw new Error(constants_1.constants.errors.type("options", "object", typeof options));
    }
    options = (0, common_1.mergeObj)({
        requestOptions: {
            headers: {
                "User-Agent": constants_1.constants.headers.userAgent,
            },
        },
        m3u8streamRequestOptions: {
            headers: {
                "User-Agent": constants_1.constants.headers.userAgent,
            },
        },
    }, options);
    if ((0, youtube_1.isDashContentURL)(stream.url) || (0, youtube_1.isHlsContentURL)(stream.url)) {
        const m3u8stream = (0, common_1.requireOrThrow)("m3u8stream");
        let begin = options.begin;
        if (typeof begin === "undefined" && (0, youtube_1.isLiveContentURL)(stream.url)) {
            begin = Date.now();
        }
        return m3u8stream(stream.url, {
            begin,
            requestOptions: options.m3u8streamRequestOptions,
        });
    }
    let streamURL = stream.url;
    if (typeof options.begin === "number") {
        streamURL += `&begin=${options.begin}`;
    }
    const resp = yield (0, undici_1.request)(streamURL, options.requestOptions);
    return resp.body;
});
exports.getReadableStream = getReadableStream;
