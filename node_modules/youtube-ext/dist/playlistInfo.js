"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.playlistInfo = void 0;
const undici_1 = require("undici");
const constants_1 = require("./utils/constants");
const common_1 = require("./utils/common");
/**
 * Get full information about a YouTube playlist.
 */
const playlistInfo = (url, options = {}) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
    if (typeof url !== "string") {
        throw new Error(constants_1.constants.errors.type("url", "string", typeof url));
    }
    if (typeof options !== "object") {
        throw new Error(constants_1.constants.errors.type("options", "object", typeof options));
    }
    options = (0, common_1.mergeObj)({
        requestOptions: {
            headers: {
                "User-Agent": constants_1.constants.headers.userAgent,
            },
        },
    }, options);
    const id = (_b = (_a = url.match(constants_1.constants.urls.playlist.getIdRegex)) === null || _a === void 0 ? void 0 : _a[2]) !== null && _b !== void 0 ? _b : url;
    if (!url.startsWith("http")) {
        url = constants_1.constants.urls.playlist.base(id);
    }
    let data;
    try {
        const resp = yield (0, undici_1.request)(url, options.requestOptions);
        data = yield resp.body.text();
    }
    catch (err) {
        throw new Error(`Failed to fetch url "${url}". (${err})`);
    }
    let initialDataRaw;
    try {
        initialDataRaw = (0, common_1.contentBetween)(data, "var ytInitialData = ", ";</script>");
    }
    catch (err) {
        throw new Error(`Failed to parse data from webpage. (${err})`);
    }
    let contents;
    try {
        const raw = initialDataRaw.substring(initialDataRaw.lastIndexOf('"playlistVideoListRenderer":{"contents":') + 40, initialDataRaw.lastIndexOf('],"playlistId"') + 1);
        contents = JSON.parse(raw);
    }
    catch (err) {
        throw new Error(`Failed to parse contents from data. (${err})`);
    }
    let microformat;
    try {
        const raw = initialDataRaw.substring(initialDataRaw.lastIndexOf('"microformat":') + 14, initialDataRaw.lastIndexOf(',"sidebar"'));
        microformat = JSON.parse(raw);
    }
    catch (err) {
        throw new Error(`Failed to parse micro-formats from data. (${err})`);
    }
    const playlist = {
        title: (_c = microformat === null || microformat === void 0 ? void 0 : microformat.microformatDataRenderer) === null || _c === void 0 ? void 0 : _c.title,
        id,
        url: (_d = microformat === null || microformat === void 0 ? void 0 : microformat.microformatDataRenderer) === null || _d === void 0 ? void 0 : _d.urlCanonical,
        description: (_e = microformat === null || microformat === void 0 ? void 0 : microformat.microformatDataRenderer) === null || _e === void 0 ? void 0 : _e.description,
        videos: [],
        thumbnails: (_g = (_f = microformat === null || microformat === void 0 ? void 0 : microformat.microformatDataRenderer) === null || _f === void 0 ? void 0 : _f.thumbnail) === null || _g === void 0 ? void 0 : _g.thumbnails,
    };
    for (const { playlistVideoRenderer } of contents) {
        if (playlistVideoRenderer) {
            const video = parsePlaylistVideo(playlistVideoRenderer);
            playlist.videos.push(video);
        }
    }
    try {
        const initialContinuationToken = (0, common_1.contentBetween)(data, '"continuationCommand":{"token":"', '","');
        const innerTubeRaw = (0, common_1.contentBetween)(data, '"INNERTUBE_API_KEY":', ',"INNERTUBE_CONTEXT":');
        const { INNERTUBE_API_KEY, INNERTUBE_CLIENT_VERSION } = JSON.parse('{"INNERTUBE_API_KEY":' + innerTubeRaw + "}");
        let continuationToken = initialContinuationToken;
        while (continuationToken) {
            const resp = yield (0, undici_1.request)(constants_1.constants.urls.playlist.continuation(INNERTUBE_API_KEY), Object.assign(Object.assign({}, options.requestOptions), { method: "POST", body: JSON.stringify({
                    continuation: continuationToken,
                    context: {
                        client: {
                            utcOffsetMinutes: 0,
                            gl: "US",
                            hl: "en",
                            clientName: "WEB",
                            clientVersion: INNERTUBE_CLIENT_VERSION,
                        },
                        user: {},
                        request: {},
                    },
                }) }));
            const data = (yield resp.body.json());
            continuationToken = undefined;
            for (const x of (_h = data === null || data === void 0 ? void 0 : data.onResponseReceivedActions) !== null && _h !== void 0 ? _h : []) {
                for (const { playlistVideoRenderer, continuationItemRenderer, } of (_j = x === null || x === void 0 ? void 0 : x.appendContinuationItemsAction) === null || _j === void 0 ? void 0 : _j.continuationItems) {
                    if (playlistVideoRenderer) {
                        const video = parsePlaylistVideo(playlistVideoRenderer);
                        playlist.videos.push(video);
                    }
                    if (continuationItemRenderer) {
                        const nextContinuationToken = (_l = (_k = continuationItemRenderer === null || continuationItemRenderer === void 0 ? void 0 : continuationItemRenderer.continuationEndpoint) === null || _k === void 0 ? void 0 : _k.continuationCommand) === null || _l === void 0 ? void 0 : _l.token;
                        continuationToken = nextContinuationToken;
                    }
                }
            }
        }
    }
    catch (err) { }
    return playlist;
});
exports.playlistInfo = playlistInfo;
exports.default = exports.playlistInfo;
const parsePlaylistVideo = (x) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;
    const video = {
        title: (_b = (_a = x === null || x === void 0 ? void 0 : x.title) === null || _a === void 0 ? void 0 : _a.runs[0]) === null || _b === void 0 ? void 0 : _b.text,
        id: x === null || x === void 0 ? void 0 : x.videoId,
        url: constants_1.constants.urls.base +
            ((_e = (_d = (_c = x === null || x === void 0 ? void 0 : x.navigationEndpoint) === null || _c === void 0 ? void 0 : _c.commandMetadata) === null || _d === void 0 ? void 0 : _d.webCommandMetadata) === null || _e === void 0 ? void 0 : _e.url),
        channel: {
            name: (_g = (_f = x === null || x === void 0 ? void 0 : x.shortBylineText) === null || _f === void 0 ? void 0 : _f.runs[0]) === null || _g === void 0 ? void 0 : _g.text,
            id: (_m = (_l = (_k = (_j = (_h = x === null || x === void 0 ? void 0 : x.shortBylineText) === null || _h === void 0 ? void 0 : _h.runs[0]) === null || _j === void 0 ? void 0 : _j.navigationEndpoint) === null || _k === void 0 ? void 0 : _k.commandMetadata) === null || _l === void 0 ? void 0 : _l.webCommandMetadata) === null || _m === void 0 ? void 0 : _m.url,
            url: constants_1.constants.urls.base +
                ((_r = (_q = (_p = (_o = x === null || x === void 0 ? void 0 : x.shortBylineText) === null || _o === void 0 ? void 0 : _o.runs[0]) === null || _p === void 0 ? void 0 : _p.navigationEndpoint) === null || _q === void 0 ? void 0 : _q.browseEndpoint) === null || _r === void 0 ? void 0 : _r.browseId),
        },
        thumbnails: (_s = x === null || x === void 0 ? void 0 : x.thumbnail) === null || _s === void 0 ? void 0 : _s.thumbnails,
        duration: {
            pretty: (_t = x === null || x === void 0 ? void 0 : x.lengthText) === null || _t === void 0 ? void 0 : _t.simpleText,
            text: (_w = (_v = (_u = x === null || x === void 0 ? void 0 : x.lengthText) === null || _u === void 0 ? void 0 : _u.accessibility) === null || _v === void 0 ? void 0 : _v.accessibilityData) === null || _w === void 0 ? void 0 : _w.label,
            lengthSec: x === null || x === void 0 ? void 0 : x.lengthSeconds,
        },
    };
    return video;
};
